"use strict";

var should = require("chai").should();

var prf = require("../prf");

describe("prf", function () {
    it("should return correct TLS 1.2 output", function () {
        // https://www.ietf.org/mail-archive/web/tls/current/msg03416.html

        var secret = new Buffer([
            0x9b,
            0xbe,
            0x43,
            0x6b,
            0xa9,
            0x40,
            0xf0,
            0x17,
            0xb1,
            0x76,
            0x52,
            0x84,
            0x9a,
            0x71,
            0xdb,
            0x35,
        ]);

        var seed = new Buffer([
            0xa0,
            0xba,
            0x9f,
            0x93,
            0x6c,
            0xda,
            0x31,
            0x18,
            0x27,
            0xa6,
            0xf7,
            0x96,
            0xff,
            0xd5,
            0x19,
            0x8c,
        ]);

        var label = new Buffer([
            0x74,
            0x65,
            0x73,
            0x74,
            0x20,
            0x6c,
            0x61,
            0x62,
            0x65,
            0x6c,
        ]);

        //label.toString( 'ascii' ).should.equal( 'test label' );

        var output = prf({ major: ~1, minor: ~2 })(secret, label, seed, 100);

        var expected = new Buffer([
            0xe3,
            0xf2,
            0x29,
            0xba,
            0x72,
            0x7b,
            0xe1,
            0x7b,
            0x8d,
            0x12,
            0x26,
            0x20,
            0x55,
            0x7c,
            0xd4,
            0x53,
            0xc2,
            0xaa,
            0xb2,
            0x1d,
            0x07,
            0xc3,
            0xd4,
            0x95,
            0x32,
            0x9b,
            0x52,
            0xd4,
            0xe6,
            0x1e,
            0xdb,
            0x5a,
            0x6b,
            0x30,
            0x17,
            0x91,
            0xe9,
            0x0d,
            0x35,
            0xc9,
            0xc9,
            0xa4,
            0x6b,
            0x4e,
            0x14,
            0xba,
            0xf9,
            0xaf,
            0x0f,
            0xa0,
            0x22,
            0xf7,
            0x07,
            0x7d,
            0xef,
            0x17,
            0xab,
            0xfd,
            0x37,
            0x97,
            0xc0,
            0x56,
            0x4b,
            0xab,
            0x4f,
            0xbc,
            0x91,
            0x66,
            0x6e,
            0x9d,
            0xef,
            0x9b,
            0x97,
            0xfc,
            0xe3,
            0x4f,
            0x79,
            0x67,
            0x89,
            0xba,
            0xa4,
            0x80,
            0x82,
            0xd1,
            0x22,
            0xee,
            0x42,
            0xc5,
            0xa7,
            0x2e,
            0x5a,
            0x51,
            0x10,
            0xff,
            0xf7,
            0x01,
            0x87,
            0x34,
            0x7b,
            0x66,
        ]);

        output.should.deep.equal(expected);
    });

    it("should return correct TLS 1.0 output", function () {
        // https://code.google.com/p/as3crypto/source/browse/trunk/as3crypto/src/com/hurlant/crypto/tests/TLSPRFTest.as?r=5

        var secret = new Buffer(48);
        secret.fill(0xab);

        var label = new Buffer("PRF Testvector");

        var seed = new Buffer(64);
        seed.fill(0xcd);

        var output = prf({ major: ~1, minor: ~0 })(secret, label, seed, 104);

        var expected = new Buffer([
            0xd3,
            0xd4,
            0xd1,
            0xe3,
            0x49,
            0xb5,
            0xd5,
            0x15,
            0x04,
            0x46,
            0x66,
            0xd5,
            0x1d,
            0xe3,
            0x2b,
            0xab,
            0x25,
            0x8c,
            0xb5,
            0x21,
            0xb6,
            0xb0,
            0x53,
            0x46,
            0x3e,
            0x35,
            0x48,
            0x32,
            0xfd,
            0x97,
            0x67,
            0x54,
            0x44,
            0x3b,
            0xcf,
            0x9a,
            0x29,
            0x65,
            0x19,
            0xbc,
            0x28,
            0x9a,
            0xbc,
            0xbc,
            0x11,
            0x87,
            0xe4,
            0xeb,
            0xd3,
            0x1e,
            0x60,
            0x23,
            0x53,
            0x77,
            0x6c,
            0x40,
            0x8a,
            0xaf,
            0xb7,
            0x4c,
            0xbc,
            0x85,
            0xef,
            0xf6,
            0x92,
            0x55,
            0xf9,
            0x78,
            0x8f,
            0xaa,
            0x18,
            0x4c,
            0xbb,
            0x95,
            0x7a,
            0x98,
            0x19,
            0xd8,
            0x4a,
            0x5d,
            0x7e,
            0xb0,
            0x06,
            0xeb,
            0x45,
            0x9d,
            0x3a,
            0xe8,
            0xde,
            0x98,
            0x10,
            0x45,
            0x4b,
            0x8b,
            0x2d,
            0x8f,
            0x1a,
            0xfb,
            0xc6,
            0x55,
            0xa8,
            0xc9,
            0xa0,
            0x13,
        ]);

        output.should.deep.equal(expected);
    });
});
